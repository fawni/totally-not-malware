#![windows_subsystem = "windows"]

use iced::widget::{self, button, column, image, row, text, text_input};
use iced::{
    alignment, event, keyboard, subscription, theme, window, Alignment, Application, Color,
    Command, Element, Event, Length, Settings, Subscription, Theme,
};

const TEXT_SIZE: u16 = 13;
const INPUT_LENGTH: u16 = 160;

macro_rules! resource {
    ($r:literal) => {
        format!("{}/resources/{}", env!("CARGO_MANIFEST_DIR"), $r)
    };
}

pub fn main() -> iced::Result {
    Malware::run(Settings {
        window: window::Settings {
            size: (500, 200),
            resizable: false,
            position: window::Position::Centered,
            icon: Some(window::Icon::from_file(resource!("scarlet.png")).unwrap()),
            ..window::Settings::default()
        },
        default_font: Some(include_bytes!("../resources/CozetteVectorBold.ttf")),
        default_text_size: TEXT_SIZE,
        ..Settings::default()
    })
}

#[derive(Debug, Clone)]
enum Message {
    ThxPressed,
    CreditChanged(String),
    ExpiryChanged(String),
    SecurityChanged(String),
    TabPressed { shift: bool },
    EnterPressed,
}

#[derive(Default)]
struct Malware {
    credit_value: String,
    expiry_value: String,
    security_value: String,
}

impl Malware {
    fn exit() {
        std::process::exit(0);
    }
}

impl Application for Malware {
    type Message = Message;
    type Executor = iced::executor::Default;
    type Theme = Theme;
    type Flags = ();

    fn new(_flags: ()) -> (Self, Command<Message>) {
        (Self::default(), widget::focus_next())
    }

    fn title(&self) -> String {
        String::from("Totally Not Malware")
    }

    fn update(&mut self, message: Message) -> Command<Message> {
        match message {
            Message::CreditChanged(value) => {
                let value = value
                    .chars()
                    .filter(|c| c.is_numeric())
                    .take(19)
                    .collect::<String>();
                self.credit_value = value;

                Command::none()
            }
            Message::ExpiryChanged(value) => {
                let value = value
                    .chars()
                    .filter(|c| c.is_numeric())
                    .take(4)
                    .collect::<String>();
                self.expiry_value = value;

                Command::none()
            }
            Message::SecurityChanged(value) => {
                let value = value
                    .chars()
                    .filter(|c| c.is_numeric())
                    .take(3)
                    .collect::<String>();
                self.security_value = value;

                Command::none()
            }
            Message::TabPressed { shift } => {
                if shift {
                    widget::focus_previous()
                } else {
                    widget::focus_next()
                }
            }
            Message::ThxPressed | Message::EnterPressed => {
                Self::exit();
                Command::none()
            }
        }
    }

    fn view(&self) -> Element<Message> {
        let image = image(image::Handle::from_path(resource!("sofia.png")));

        let pls_text = text(
            "H-hi there...\nDo you th-think I could have your\ncredit card information, p-please?",
        )
        .horizontal_alignment(alignment::Horizontal::Center);

        let credit_text = text("Card number:   ");
        let credit_input = text_input("", &self.credit_value, Self::Message::CreditChanged)
            .width(Length::Units(INPUT_LENGTH));

        let expiry_text = text("Expiry date:   ");
        let expiry_input = text_input("", &self.expiry_value, Self::Message::ExpiryChanged)
            .width(Length::Units(INPUT_LENGTH));

        let security_text = text("Security code: ");
        let security_input = text_input("", &self.security_value, Self::Message::SecurityChanged)
            .width(Length::Units(INPUT_LENGTH));

        let thx_button = button("Th-thanks")
            .padding([5, 15])
            .on_press(Message::ThxPressed);

        row![
            image,
            column![
                pls_text,
                row![credit_text, credit_input].align_items(Alignment::Center),
                row![expiry_text, expiry_input].align_items(Alignment::Center),
                row![security_text, security_input].align_items(Alignment::Center),
                thx_button,
            ]
            .align_items(Alignment::Center)
            .spacing(5)
            .padding(5)
        ]
        .align_items(Alignment::Center)
        .into()
    }

    fn theme(&self) -> Theme {
        Theme::custom(theme::Palette {
            background: Color::WHITE,
            text: Color::BLACK,
            primary: Color::from_rgb8(184, 203, 237),
            ..theme::Palette::LIGHT
        })

        // Dark theme
        // Theme::custom(theme::Palette {
        //     background: Color::from_rgb8(70, 63, 76),
        //     text: Color::WHITE,
        //     primary: Color::from_rgb8(179, 171, 183),
        //     ..theme::Palette::DARK
        // })
    }

    fn subscription(&self) -> Subscription<Message> {
        subscription::events_with(|event, status| match (event, status) {
            (
                Event::Keyboard(keyboard::Event::KeyPressed {
                    key_code: keyboard::KeyCode::Tab,
                    modifiers,
                    ..
                }),
                event::Status::Ignored,
            ) => Some(Message::TabPressed {
                shift: modifiers.shift(),
            }),
            (
                Event::Keyboard(keyboard::Event::KeyPressed {
                    key_code: keyboard::KeyCode::Enter | keyboard::KeyCode::NumpadEnter,
                    ..
                }),
                event::Status::Ignored,
            ) => Some(Message::EnterPressed),
            _ => None,
        })
    }
}
